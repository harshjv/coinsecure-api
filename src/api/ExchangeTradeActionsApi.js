/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FailResult', 'model/SuccessCancelDataResponse', 'model/SuccessOrderDataResponse', 'model/RateVolData', 'model/MinFiat', 'model/MaxVol'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FailResult'), require('../model/SuccessCancelDataResponse'), require('../model/SuccessOrderDataResponse'), require('../model/RateVolData'), require('../model/MinFiat'), require('../model/MaxVol'));
  } else {
    // Browser globals (root is window)
    if (!root.CoinsecureApiDocumentation) {
      root.CoinsecureApiDocumentation = {};
    }
    root.CoinsecureApiDocumentation.ExchangeTradeActionsApi = factory(root.CoinsecureApiDocumentation.ApiClient, root.CoinsecureApiDocumentation.FailResult, root.CoinsecureApiDocumentation.SuccessCancelDataResponse, root.CoinsecureApiDocumentation.SuccessOrderDataResponse, root.CoinsecureApiDocumentation.RateVolData, root.CoinsecureApiDocumentation.MinFiat, root.CoinsecureApiDocumentation.MaxVol);
  }
}(this, function(ApiClient, FailResult, SuccessCancelDataResponse, SuccessOrderDataResponse, RateVolData, MinFiat, MaxVol) {
  'use strict';

  /**
   * ExchangeTradeActions service.
   * @module api/ExchangeTradeActionsApi
   * @version beta
   */

  /**
   * Constructs a new ExchangeTradeActionsApi. 
   * @alias module:api/ExchangeTradeActionsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the v1userexchangeaskcancelOrderID operation.
     * @callback module:api/ExchangeTradeActionsApi~v1userexchangeaskcancelOrderIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessCancelDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Open Sell Order
     * Cancels a BTC Sell Order. Orders can only be cancelled if they are in a pending state.
     * @param {String} orderID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Enter a valid Api Key.
     * @param {module:api/ExchangeTradeActionsApi~v1userexchangeaskcancelOrderIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessCancelDataResponse}
     */
    this.v1userexchangeaskcancelOrderID = function(orderID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderID' is set
      if (orderID == undefined || orderID == null) {
        throw new Error("Missing the required parameter 'orderID' when calling v1userexchangeaskcancelOrderID");
      }


      var pathParams = {
        'orderID': orderID
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/xml', 'application/csv'];
      var returnType = SuccessCancelDataResponse;

      return this.apiClient.callApi(
        '/v1/user/exchange/ask/cancel/{orderID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1userexchangeasknew operation.
     * @callback module:api/ExchangeTradeActionsApi~v1userexchangeasknewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessOrderDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BTC Sell Order
     * Creates a BTC Sell Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
     * @param {module:model/RateVolData} body Please send the form with valid inputs.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Enter a valid Api Key.
     * @param {String} opts.accept JSON, XML or CSV can be returned (Optional)
     * @param {module:api/ExchangeTradeActionsApi~v1userexchangeasknewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessOrderDataResponse}
     */
    this.v1userexchangeasknew = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling v1userexchangeasknew");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'accept': opts['accept']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/xml', 'application/csv'];
      var returnType = SuccessOrderDataResponse;

      return this.apiClient.callApi(
        '/v1/user/exchange/ask/new', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1userexchangebidcancelOrderID operation.
     * @callback module:api/ExchangeTradeActionsApi~v1userexchangebidcancelOrderIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessCancelDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Open Buy Order
     * Cancels a BTC Buy Order. Orders can only be cancelled if they are in a pending state.
     * @param {String} orderID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Enter a valid Api Key.
     * @param {module:api/ExchangeTradeActionsApi~v1userexchangebidcancelOrderIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessCancelDataResponse}
     */
    this.v1userexchangebidcancelOrderID = function(orderID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderID' is set
      if (orderID == undefined || orderID == null) {
        throw new Error("Missing the required parameter 'orderID' when calling v1userexchangebidcancelOrderID");
      }


      var pathParams = {
        'orderID': orderID
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/xml', 'application/csv'];
      var returnType = SuccessCancelDataResponse;

      return this.apiClient.callApi(
        '/v1/user/exchange/bid/cancel/{orderID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1userexchangebidnew operation.
     * @callback module:api/ExchangeTradeActionsApi~v1userexchangebidnewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessOrderDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BTC Buy Order
     * Creates a BTC Buy Order. If the order cannot be fulfilled completely, data can be found in allAsks and wil be added as a pending order.
     * @param {module:model/RateVolData} body Please send the form with valid inputs.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Enter a valid Api Key.
     * @param {String} opts.accept JSON, XML or CSV can be returned (Optional)
     * @param {module:api/ExchangeTradeActionsApi~v1userexchangebidnewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessOrderDataResponse}
     */
    this.v1userexchangebidnew = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling v1userexchangebidnew");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'accept': opts['accept']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/xml', 'application/csv'];
      var returnType = SuccessOrderDataResponse;

      return this.apiClient.callApi(
        '/v1/user/exchange/bid/new', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1userexchangeinstantbuy operation.
     * @callback module:api/ExchangeTradeActionsApi~v1userexchangeinstantbuyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessOrderDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Instantly Buy BTC
     * Instantly buys BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
     * @param {module:model/MinFiat} body Please send the form with valid inputs.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Enter a valid Api Key.
     * @param {String} opts.accept JSON, XML or CSV can be returned (Optional)
     * @param {module:api/ExchangeTradeActionsApi~v1userexchangeinstantbuyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessOrderDataResponse}
     */
    this.v1userexchangeinstantbuy = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling v1userexchangeinstantbuy");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'accept': opts['accept']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/xml', 'application/csv'];
      var returnType = SuccessOrderDataResponse;

      return this.apiClient.callApi(
        '/v1/user/exchange/instant/buy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1userexchangeinstantsell operation.
     * @callback module:api/ExchangeTradeActionsApi~v1userexchangeinstantsellCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessOrderDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Instantly Sell BTC
     * Instantly sells BTC at the closest rate found. This tool will sell at any rate needed to complete the order. It will never exceed the amount, but may fall below.
     * @param {module:model/MaxVol} body Please send the form with valid inputs.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Enter a valid Api Key.
     * @param {String} opts.accept JSON, XML or CSV can be returned (Optional)
     * @param {module:api/ExchangeTradeActionsApi~v1userexchangeinstantsellCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessOrderDataResponse}
     */
    this.v1userexchangeinstantsell = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling v1userexchangeinstantsell");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'accept': opts['accept']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/xml', 'application/csv'];
      var returnType = SuccessOrderDataResponse;

      return this.apiClient.callApi(
        '/v1/user/exchange/instant/sell', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
