/**
 * Coinsecure Api Documentation
 * To generate an API key, please visit <a href='https://coinsecure.in/api' target='_new' class='homeapi'>https://coinsecure.in/api</a>.<br>Guidelines for use can be accessed at <a href='https://api.coinsecure.in/v1/guidelines'>https://api.coinsecure.in/v1/guidelines</a>.<br>Programming Language Libraries for use can be accessed at <a href='https://api.coinsecure.in/v1/code-libraries'>https://api.coinsecure.in/v1/code-libraries</a>.
 *
 * OpenAPI spec version: beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CoinsecureApiDocumentation);
  }
}(this, function(expect, CoinsecureApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CoinsecureApiDocumentation.ExchangeTradeDataApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ExchangeTradeDataApi', function() {
    describe('v1exchangeasklow', function() {
      it('should call v1exchangeasklow successfully', function(done) {
        //uncomment below and update the code to test v1exchangeasklow
        //instance.v1exchangeasklow(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1exchangeaskorders', function() {
      it('should call v1exchangeaskorders successfully', function(done) {
        //uncomment below and update the code to test v1exchangeaskorders
        //instance.v1exchangeaskorders(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1exchangebidhigh', function() {
      it('should call v1exchangebidhigh successfully', function(done) {
        //uncomment below and update the code to test v1exchangebidhigh
        //instance.v1exchangebidhigh(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1exchangebidorders', function() {
      it('should call v1exchangebidorders successfully', function(done) {
        //uncomment below and update the code to test v1exchangebidorders
        //instance.v1exchangebidorders(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1exchangelastTrade', function() {
      it('should call v1exchangelastTrade successfully', function(done) {
        //uncomment below and update the code to test v1exchangelastTrade
        //instance.v1exchangelastTrade(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1exchangemax24Hr', function() {
      it('should call v1exchangemax24Hr successfully', function(done) {
        //uncomment below and update the code to test v1exchangemax24Hr
        //instance.v1exchangemax24Hr(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1exchangemin24Hr', function() {
      it('should call v1exchangemin24Hr successfully', function(done) {
        //uncomment below and update the code to test v1exchangemin24Hr
        //instance.v1exchangemin24Hr(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1exchangeticker', function() {
      it('should call v1exchangeticker successfully', function(done) {
        //uncomment below and update the code to test v1exchangeticker
        //instance.v1exchangeticker(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1userexchangeaskcancelled', function() {
      it('should call v1userexchangeaskcancelled successfully', function(done) {
        //uncomment below and update the code to test v1userexchangeaskcancelled
        //instance.v1userexchangeaskcancelled(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1userexchangeaskcompleted', function() {
      it('should call v1userexchangeaskcompleted successfully', function(done) {
        //uncomment below and update the code to test v1userexchangeaskcompleted
        //instance.v1userexchangeaskcompleted(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1userexchangeaskpending', function() {
      it('should call v1userexchangeaskpending successfully', function(done) {
        //uncomment below and update the code to test v1userexchangeaskpending
        //instance.v1userexchangeaskpending(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1userexchangebidcancelled', function() {
      it('should call v1userexchangebidcancelled successfully', function(done) {
        //uncomment below and update the code to test v1userexchangebidcancelled
        //instance.v1userexchangebidcancelled(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1userexchangebidcompleted', function() {
      it('should call v1userexchangebidcompleted successfully', function(done) {
        //uncomment below and update the code to test v1userexchangebidcompleted
        //instance.v1userexchangebidcompleted(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1userexchangebidpending', function() {
      it('should call v1userexchangebidpending successfully', function(done) {
        //uncomment below and update the code to test v1userexchangebidpending
        //instance.v1userexchangebidpending(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1userexchangetrades', function() {
      it('should call v1userexchangetrades successfully', function(done) {
        //uncomment below and update the code to test v1userexchangetrades
        //instance.v1userexchangetrades(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
